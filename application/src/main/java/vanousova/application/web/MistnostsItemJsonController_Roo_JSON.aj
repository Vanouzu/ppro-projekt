// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package vanousova.application.web;

import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;
import vanousova.application.web.MistnostsItemJsonController;
import vanousova.model.Mistnost;
import vanousova.service.api.MistnostService;

privileged aspect MistnostsItemJsonController_Roo_JSON {
    
    declare @type: MistnostsItemJsonController: @RestController;
    
    declare @type: MistnostsItemJsonController: @RequestMapping(value = "/mistnosts/{mistnost}", name = "MistnostsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param mistnostService
     */
    @Autowired
    public MistnostsItemJsonController.new(MistnostService mistnostService) {
        this.mistnostService = mistnostService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @param id_mist
     * @return Mistnost
     */
    @ModelAttribute
    public Mistnost MistnostsItemJsonController.getMistnost(@PathVariable("mistnost") Long id_mist) {
        Mistnost mistnost = mistnostService.findOne(id_mist);
        if (mistnost == null) {
            throw new NotFoundException(String.format("Mistnost with identifier '%s' not found",id_mist));
        }
        return mistnost;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param mistnost
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> MistnostsItemJsonController.show(@ModelAttribute Mistnost mistnost) {
        return ResponseEntity.ok(mistnost);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param mistnost
     * @return UriComponents
     */
    public static UriComponents MistnostsItemJsonController.showURI(Mistnost mistnost) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(MistnostsItemJsonController.class).show(mistnost))
            .buildAndExpand(mistnost.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedMistnost
     * @param mistnost
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> MistnostsItemJsonController.update(@ModelAttribute Mistnost storedMistnost, @Valid @RequestBody Mistnost mistnost, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        mistnost.setId(storedMistnost.getId());
        getMistnostService().save(mistnost);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param mistnost
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> MistnostsItemJsonController.delete(@ModelAttribute Mistnost mistnost) {
        getMistnostService().delete(mistnost);
        return ResponseEntity.ok().build();
    }
    
}
